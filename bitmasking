//replacement function
unsigned replace_byte(unsigned x, int i, unsigned char b){
//convert y bits to two's complement representation of y
char y; y=(~b)+1;

unsigned int z,q;
//if replacing the first significant byte of x
if(i == 0){
  //0's in the first two digits of z
	z = 0x00ffffff;
  //shift left 24 = 8*3
	q = y << 24;}
else if(i == 1){
	z = 0xff00ffff;
	q = y << 16;}
else if(i == 2){
	z = 0xffff00ff;
	q = y << 8;}
else{
	z = 0xffffff00;
	q = y << 0;}
  //x & z returns x minues the portions of z with 0's in it. | q copies the bits of q to the bits of x'.
unsigned b; b = (x & z) | q);
return b;
}

void main(){
  //variables to show that function runs properly
	unsigned x = 50;
	int i = 1;
	unsigned char b = 12;
	char y;
	y=(~b)+1;
	

	unsigned b;
	b = (x & 0xff00ffff)
	printf("Replacing %nth byte of 32 bit int x: %X with 2's complement of byte b: %X \n", i, x, b);
	printf("2's complement of b: %X \n", y);
	printf("int x without bit i of x: %X \n", b);
	b = b | (y << 16);
	printf("replacement done: %X \n", b);
	
	
	printf("Running function on %X \n", x);
	unsigned z = replace_byte(x,i,b);
	printf("Result of function completion: %X \n", z );
}
